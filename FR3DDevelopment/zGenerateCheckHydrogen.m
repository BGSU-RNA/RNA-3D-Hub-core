

[a,x] = xlsread('H_bonding_Atoms_from_Isostericity_Table.xls');

fid = fopen('zCheckHydrogen.m','w');       % open for writing

fprintf(fid,'%% This program is generated by zGenerateCheckHydrogen.m\n');
fprintf(fid,'%% based on the Excel file H_bonding_Atoms_from_Isostericity_Table.xls\n');
fprintf(fid,'%% created by Jesse Stombaugh.\n');
fprintf(fid,'%% zCheckHydrogen(NT1,NT2,Class) computes the angles and distances in the\n');
fprintf(fid,'%% hydrogen bonds between two nucleotides assuming their interaction is Class\n');
fprintf(fid,'%% The program calls the base that should be at the origin N1, the other N2\n');
fprintf(fid,'%%\n');
fprintf(fid,'%%\n');
fprintf(fid,'function [Hydrogen] = zCheckHydrogen(NT1,NT2,Class)\n');
fprintf(fid,'\n');
fprintf(fid,'Paircode = 4*(NT2.Code-1) + NT1.Code;\n');
fprintf(fid,'switch Paircode\n');
fprintf(fid,'  case {2, 3, 4, 8, 10, 12},\n');
fprintf(fid,'    N1 = NT2;\n');
fprintf(fid,'    N2 = NT1;\n');
fprintf(fid,'  otherwise\n');
fprintf(fid,'    N1 = NT1;\n');
fprintf(fid,'    N2 = NT2;\n');
fprintf(fid,'end\n');
fprintf(fid,'Paircode = 4*(N2.Code-1) + N1.Code;\n');
fprintf(fid,'\n');

h = 1;                                    % hydrogen bond counter

for r = 9:length(x(:,1)),
  switch x{r,1},
    case 'cis W/W',   Class =  1;
    case 'trans W/W', Class =  2;
    case 'cis W/H',   Class =  3;
    case 'trans W/H', Class =  4;
    case 'cis W/S',   Class =  5;
    case 'trans W/S', Class =  6;
    case 'cis H/H',   Class =  7;
    case 'trans H/H', Class =  8;
    case 'cis H/S',   Class =  9;
    case 'trans H/S', Class = 10;
    case 'cis S/S',   Class = 11;
    case 'trans S/S', Class = 12;
    case 'cis W/B',   Class = 13;
  end

  switch x{r,2},
    case 'A', C1 = 1;
    case 'C', C1 = 2;
    case 'G', C1 = 3;
    case 'U', C1 = 4;
  end

  switch x{r,3},
    case 'A', C2 = 1;
    case 'C', C2 = 2;
    case 'G', C2 = 3;
    case 'U', C2 = 4;
  end

  

  Paircode = 4*(C2-1) + C1;

  if Paircode == 7,
    Class = -Class;                                 % ridiculous but necessary
  end

  switch Paircode
    case {2, 3, 4, 8, 10, 12},                   % CA, GA, etc.
      Class = -Class;
      if Paircode == 10,
        Class = -Class;                             % not smart!
      end
      a1 = x{r,8};                                  % reverse order of atoms
      a2 = x{r,7};
      a3 = x{r,5};
      a4 = x{r,4};
      b  = C1;
      C1 = C2;
      C2 = b;
      Paircode = 4*(C2-1) + C1;
    otherwise
      a1 = x{r,4};                                  % atoms in given order
      a2 = x{r,5};
      a3 = x{r,7};
      a4 = x{r,8};
  end

%  [x{r,1} ' ' x{r,2} ' ' x{r,3} ' ' a1 a2 a3 a4]
%  h

%  [x{r,1} ' ' x{r,2} ' ' x{r,3} ' ' a1 a2 a3 a4]
  if (h == 1),                                   % first hydrogen bond
    fprintf(fid,'if (Class == %1d) & (Paircode == %1d),\n',Class,Paircode);
  end

  if (strcmp(a2,'H2*')==1),                   % H2* is not in PDB files
    fprintf(fid,'  Hydrogen(%1d).Angle    = [];\n',h);
    fprintf(fid,'  Hydrogen(%1d).Distance = zDistance(',h);
    fprintf(fid,'N1.%s,',zGetAtomStorageLocation(a1,C1));
    fprintf(fid,'N2.%s);\n',zGetAtomStorageLocation(a3,C2));
  elseif (strcmp(a3,'H2*')==1),
    fprintf(fid,'  Hydrogen(%1d).Angle    = [];\n',h);
    fprintf(fid,'  Hydrogen(%1d).Distance = zDistance(',h);
    fprintf(fid,'N1.%s,',zGetAtomStorageLocation(a2,C1));
    fprintf(fid,'N2.%s);\n',zGetAtomStorageLocation(a4,C2));
  elseif ((strcmp(a2,'H3')==1) & (C1==2))
    fprintf(fid,'  Hydrogen(%1d).Angle    = [];\n',h);
    fprintf(fid,'  Hydrogen(%1d).Distance = zDistance(',h);
    fprintf(fid,'N1.%s,',zGetAtomStorageLocation(a1,C1));
    fprintf(fid,'N2.%s);\n',zGetAtomStorageLocation(a3,C2));
  elseif ((strcmp(a3,'H3')==1) & (C2==2)),
    fprintf(fid,'  Hydrogen(%1d).Angle    = [];\n',h);
    fprintf(fid,'  Hydrogen(%1d).Distance = zDistance(',h);
    fprintf(fid,'N1.%s,',zGetAtomStorageLocation(a2,C1));
    fprintf(fid,'N2.%s);\n',zGetAtomStorageLocation(a4,C2));
  elseif ((strcmp(a2,'H1')==1) & (C1==1))
    fprintf(fid,'  Hydrogen(%1d).Angle    = [];\n',h);
    fprintf(fid,'  Hydrogen(%1d).Distance = zDistance(',h);
    fprintf(fid,'N1.%s,',zGetAtomStorageLocation(a1,C1));
    fprintf(fid,'N2.%s);\n',zGetAtomStorageLocation(a3,C2));
  elseif ((strcmp(a3,'H1')==1) & (C2==1)),
    fprintf(fid,'  Hydrogen(%1d).Angle    = [];\n',h);
    fprintf(fid,'  Hydrogen(%1d).Distance = zDistance(',h);
    fprintf(fid,'N1.%s,',zGetAtomStorageLocation(a2,C1));
    fprintf(fid,'N2.%s);\n',zGetAtomStorageLocation(a4,C2));
  else
    fprintf(fid,'  Hydrogen(%1d).Angle    = zAngle(',h);

    if (a1 ~= '-'),
      fprintf(fid,'N1.%s,',zGetAtomStorageLocation(a1,C1));
    end
    fprintf(fid,'N1.%s,',zGetAtomStorageLocation(a2,C1));
    fprintf(fid,'N2.%s',zGetAtomStorageLocation(a3,C2));
    if (a4 ~= '-'),
      fprintf(fid,',N2.%s);\n',zGetAtomStorageLocation(a4,C2));
    else
      fprintf(fid,');\n');
    end

    fprintf(fid,'  Hydrogen(%1d).Distance = zDistance(',h);
    fprintf(fid,'N1.%s,',zGetAtomStorageLocation(a2,C1));
    fprintf(fid,'N2.%s);\n',zGetAtomStorageLocation(a3,C2));
  end

  h = h + 1;

  if (r < length(x(:,1))),
    if (strcmp(x{r+1,1},x{r,1})==0) | (x{r+1,2} ~= x{r,2}) | (x{r+1,3} ~= x{r,3}),
      if (h > 1),
        fprintf(fid,'else');
      end
      h = 1;
    end
  else
    fprintf(fid,'else\n');
    fprintf(fid,'  Hydrogen = [];\n');
    fprintf(fid,'end\n');
    fclose(fid);
  end
end

