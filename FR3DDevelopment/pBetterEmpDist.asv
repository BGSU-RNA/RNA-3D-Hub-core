function [Seq,Scores] = pBetterEmpDist(MN,loopType,sampsize)

if ~(exist(['Models' filesep 'Emp. Distributions']) == 7),
    mkdir(['Models' filesep 'Emp. Distributions']);
end

shortName = MN(1:6);

% ---------------------------------------- sample from length dist
FN = ['Models' filesep 'Length Distributions' filesep shortName '.mat'];
load(FN,'D','-mat');

% ---------------------------------------- generate strand lengths

if strcmp(loopType,'IL'),
    ld = sum(D,2);                       % marginal distribution of left
    dim=zeros(2,sampsize);
    for i = 1:sampsize,
        dim(1,i) = randsample(length(ld),1,true,ld)-1;
        rd = D(dim(1,i)+1,:);            % almost the conditional distn
        rd = rd / sum(rd);               % normalize
        dim(2,i) = randsample(length(rd),1,true,rd)-1;
    end
elseif strcmp(loopType,'HL'),
    dim=zeros(1,sampsize);
    for i = 1:sampsize,
        dim(i) = randsample(length(D),1,true,D)-1;
    end
end
oFN = ['Sequences' filesep 'RS_' shortName '.fasta'];

% -------------------------------------- make sequence file

Seq = makeRandomSequencesDLFasta(oFN,dim);     % generate random sequences
fprintf('File Written:%s\n',oFN);

% -------------------------------------- parse

MFN = [MN '.txt'];
SFN = ['RS_' shortName '.fasta'];
Scores = JAR3DMatlab.MotifParseSingle(pwd,SFN,MFN);

% -------------------------------------- calculate distribution
Values=unique(Scores);
N=histc(Scores,Values);
step=1/length(Scores);
dist = zeroes(length(Values),1);
dist(1) = N(1)*step;
for i = 2:length(Values)
    dist(i) = dist(i-1) + N(i) * step;
end

% -------------------------------------- save distribution
distFN = ['Models' filesep 'Emp. Distributions' filesep MN(1:6) '.txt'];
fid = fopen(distFN,'w');
for i = 1:length(dist)
    fprintf(fid,'%f %f\n',Values(i),);
end
fclose(fid);

% --------------------------------------- delete large and cumbersome RS file

delete(oFN);
end